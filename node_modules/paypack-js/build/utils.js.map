{"version":3,"names":[],"mappings":"","sources":["utils.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  omitBy,\n  isNil\n} = require('lodash');\nlet secrets = {\n  client_id: null,\n  client_secret: null\n};\nlet token = {\n  access: null,\n  refresh: null\n};\nlet state = {\n  isLoggedIn: false\n};\n\n/**\n * Get application access token\n * \n * @return {string}\n */\nfunction getAccessToken() {\n  return token.access;\n}\n\n/**\n * Get application refresh token\n * \n * @return {string}\n */\nfunction getRefreshToken() {\n  return token.refresh;\n}\n\n/**\n * Set application tokens\n * \n * @param {string} access_token\n * @param {string} refresh_token\n */\nfunction setTokens(_ref) {\n  let {\n    access,\n    refresh\n  } = _ref;\n  token.access = access;\n  token.refresh = refresh;\n}\n\n/**\n * Checks if the SDK is authenticated\n * \n * @return {boolean}\n * \n */\nfunction isAuthenticated() {\n  return state.isLoggedIn;\n}\n\n/**\n * sets SDK authentication state\n */\nfunction setAuthenticationState(_state) {\n  state.isLoggedIn = _state;\n}\n\n/**\n * Formats the query object into a string\n * @param {string} param query parameters\n * @return {string}\n */\nfunction getQueryString(param) {\n  if (!param) return \"\";\n  if (param && typeof param != \"object\") throw new TypeError(\"Filter parameters should be of type object.\");\n  if (param.limit && !param.offset) param.offset = 0;\n  return Object.entries(omitBy(param, isNil)).map(_ref2 => {\n    let [key, value] = _ref2;\n    return \"\".concat(key, \"=\").concat(value);\n  }).join(\"&\");\n}\n\n/**\n * Validates if a number is a rwandan phone\n * @param {string} number phone number to validate\n * @return {boolean}\n */\nfunction isPhoneNumber(number) {\n  const errors = {\n    format: false\n  };\n\n  // Check it's a string\n  // -----------------------------------------\n  if (typeof number !== \"string\") {\n    throw new Error(\"Input should be string\");\n  }\n  const re = /^(\\+?25)?(078|079|075|073|072)\\d{7}$/;\n  if (!re.test(number)) {\n    return errors.format;\n  }\n  return true;\n}\n\n/**\n * Gets application secrets\n * \n * @return {object}\n */\nfunction getSecrets() {\n  return secrets;\n}\n\n/**\n * cheks SDK secrets availability\n * @return {void}\n */\nfunction checkSecrets() {\n  if (!secrets.client_id) {\n    throw new Error(\"Client id is required to authenticate.\");\n  }\n  if (!secrets.client_secret) {\n    throw new Error(\"Client secret is required to authenticate.\");\n  }\n}\n\n/**\n * Sets SDK secrets\n * \n * @param {string} client_id\n * @param {string} client_secret\n * \n * @return {void}\n */\nfunction setSecrets(_ref3) {\n  let {\n    client_id,\n    client_secret\n  } = _ref3;\n  if (!client_id || !client_secret) {\n    throw new Error(\"Application secrets required\");\n  }\n  secrets.client_id = client_id;\n  secrets.client_secret = client_secret;\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n  if (Array.isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\nmodule.exports = {\n  getAccessToken,\n  getRefreshToken,\n  setTokens: setTokens,\n  isAuthenticated: isAuthenticated,\n  setAuthenticationState: setAuthenticationState,\n  getQueryString: getQueryString,\n  isPhoneNumber: isPhoneNumber,\n  getSecrets: getSecrets,\n  checkSecrets: checkSecrets,\n  setSecrets: setSecrets,\n  forEach: forEach\n};"],"file":"utils.js"}