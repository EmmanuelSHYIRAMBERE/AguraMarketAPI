{"version":3,"names":[],"mappings":"","sources":["http.js"],"sourcesContent":["\"use strict\";\n\nconst axios = require(\"axios\");\nconst utils = require(\"./utils.js\");\nconst axiosInstance = axios.create({\n  baseURL: \"https://payments.paypack.rw/api/\"\n});\naxiosInstance.interceptors.request.use(async config => {\n  if (!utils.isAuthenticated()) {\n    if (config.url.includes(\"auth/agents/authorize\")) return config;else await authenticate();\n  }\n  if (utils.getAccessToken()) {\n    config.headers[\"Authorization\"] = utils.getAccessToken();\n  }\n  return config;\n}, error => Promise.reject(error));\naxiosInstance.interceptors.response.use(response => Promise.resolve(response), async error => {\n  try {\n    if (error.response) {\n      const originalRequest = error.config;\n      if (error.response.status === 401) {\n        if (originalRequest.url.includes(\"auth/agents/authorize\")) {\n          throw error.response.data || error.response;\n        }\n        if (!originalRequest._retry) {\n          originalRequest._retry = true;\n          const access_Token = await refreshAccessToken();\n          originalRequest.headers[\"Authorization\"] = access_Token;\n          return axiosInstance(originalRequest);\n        } else if (originalRequest._retry) {\n          utils.setSecrets({\n            client_id: null,\n            client_secret: null\n          });\n          throw new Error(\"Refresh token expired, please authenticate again\");\n        } else {\n          throw error.response.data || error.response;\n        }\n      } else {\n        throw error.response.data || error.response;\n      }\n    } else {\n      throw error;\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n});\n\n/**\n * Authenticates SDK\n * @return {object}\n */\nasync function authenticate() {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      utils.checkSecrets();\n      const res = await axiosInstance.post(\"auth/agents/authorize\", utils.getSecrets());\n      if (res.data) {\n        utils.setTokens(res.data);\n        utils.setAuthenticationState(true);\n      }\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Refreshes expired tokens\n * @return {string}\n */\nasync function refreshAccessToken() {\n  const refreshToken = utils.getRefreshToken();\n  if (!refreshToken) return null;\n  axiosInstance.get(\"auth/refresh/\".concat(refreshToken)).then(res => {\n    if (res.data) {\n      utils.setTokens(res.data);\n      return res.data.access;\n    }\n    return null;\n  }).catch(error => {\n    throw error;\n  });\n}\nmodule.exports = axiosInstance;"],"file":"http.js"}