{"version":3,"names":[],"mappings":"","sources":["methods.js"],"sourcesContent":["\"use strict\";\n\nconst http = require(\"./http\");\nconst utils = require(\"./utils\");\n\n/**\n * Fetch transactions according to filter parameters\n *\n * @property {string} limit limit of transactions to fetch default is 20\n * @property {string} offset offset of transactions to fetch\n * @property {string} from starting date range of transactions to fetch\n * @property {string} to ending date range of transactions to fetch\n * @property {string} kind kind of transactions to fetch eg: CASHIN or CASHOUT\n * @property {number} client transactions for a specific client\n *\n * @return {object}\n */\nasync function transactions(filters) {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await http.get(\"transactions/list?\".concat(utils.getQueryString(filters)));\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Fetch transaction according to the transaction ref\n *\n * @param {string} ref transaction ref\n *\n * @return {object}\n */\nasync function transaction(ref) {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      if (!ref) {\n        throw new Error(\"Transaction ref is required to fetch transaction\");\n      }\n      if (typeof ref != \"string\") {\n        throw new TypeError(\"Transaction reference must be a string type\");\n      }\n      const res = await http.get(\"transactions/find/\".concat(ref));\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Initiates a cashin.\n *\n * @property {string} amount amount to cashin\n * @property {number} number phone number to cashin\n *\n * @return {object}\n */\nasync function cashin(params) {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      if (!params) throw new Error(\"Cashin parameters are required\");\n      let {\n        amount = new Error(\"Property 'amount' is required to cashin\"),\n        number = new Error(\"Property 'number' is required to cashin\"),\n        environment = null\n      } = params;\n      let headers = {\n        'accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n      if (environment != null) headers['X-Webhook-Mode'] = environment;\n      if (Number(amount) == NaN) throw new TypeError(\"Property 'amount' must be a number type\");else amount = Number(amount);\n      if (amount < 100) {\n        throw new Error(\"Minimum to cashin is 100 RWF\");\n      }\n      if (typeof number !== \"string\") {\n        throw new TypeError(\"Property 'number' must a string type\");\n      }\n      if (!utils.isPhoneNumber(number)) {\n        throw new Error(\"Invalid phone number\");\n      }\n      const res = await http.post(\"transactions/cashin\", {\n        amount,\n        number\n      }, {\n        headers\n      });\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Initiates a cashout request.\n *\n * @property {string} amount amount to cashout\n * @property {number} number phone number to cashout\n *\n * @return {object}\n */\nasync function cashout(params) {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      if (!params) throw new Error(\"Cashout parameters are required\");\n      let {\n        amount = new Error(\"Property 'amount' is required to cashout\"),\n        number = new Error(\"Property 'number' is required to cashout\"),\n        environment = null\n      } = params;\n      let headers = {\n        'accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n      if (environment != null) headers['X-Webhook-Mode'] = environment;\n      if (Number(amount) == NaN) throw new TypeError(\"Property 'amount' must be a number type\");else amount = Number(amount);\n      if (amount < 100) {\n        throw new Error(\"Minimum to cashout is 100 RWF\");\n      }\n      if (typeof number !== \"string\") {\n        throw new TypeError(\"Property 'number' must a string type\");\n      }\n      if (!utils.isPhoneNumber(number)) {\n        throw new Error(\"Invalid phone number\");\n      }\n      const res = await http.post(\"transactions/cashout\", {\n        amount,\n        number\n      }, {\n        headers\n      });\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Fetch events according to filter parameters.\n *\n * @property {string} limit limit of events to fetch default is 20\n * @property {string} offset offset of events to fetch\n * @property {string} from starting date range of events to fetch\n * @property {string} to ending date range of events to fetch\n * @property {string} kind kind of events to fetch eg: CASHIN or CASHOUT\n * @property {number} client events for a specific client\n * @property {string} ref events for a specific transaction ref\n * @property {string} status events with a specific status eg: pending or successfull or failed\n *\n * @return {object}\n */\nasync function events(filters) {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await http.get(\"events/transactions?\".concat(utils.getQueryString(filters)));\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Provides a profile of authenticated user.\n *\n * @return {object}\n */\nasync function me() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await http.get(\"merchants/me\");\n      resolve(res);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nmodule.exports = {\n  transactions: transactions,\n  transaction: transaction,\n  cashin: cashin,\n  cashout: cashout,\n  events: events,\n  me: me\n};"],"file":"methods.js"}